{
  "component_title": "Toolbox Shell UI",
  "purpose_statement": "The Toolbox Shell UI module renders a palette of node-buttons and import/export controls in the web page, allowing users to drag‐drop or click to add nodes to the Drawflow editor and to import/export the flow JSON.",
  "core_requirements": [
    "Render a button palette for every registered Drawflow node type; on click, invoke editor.addNode(...) with the correct type and default data.",
    "Provide an Import control that opens a file picker, reads a JSON file, validates it, and calls editor.import(flowJson).",
    "Provide an Export control that calls editor.export(), serializes the result to JSON, and displays it in a modal or textarea for copy/download.",
    "Bind to an existing Drawflow editor instance without introducing global state; accept container and editor parameters in the module API.",
    "Gracefully handle missing or malformed input (e.g., absent container element, invalid JSON) with clear user feedback."
  ],
  "implementation_considerations": [
    "Build as a pure ES module exporting a single init function: initToolboxShell(containerEl: HTMLElement, editor: DrawflowInstance).",
    "Use only vanilla JavaScript and minimal DOM APIs (createElement, addEventListener, FileReader).",
    "Validate JSON before calling editor.import; catch parse errors and display user-friendly error messages.",
    "Avoid framework dependencies; style buttons with scoped CSS classes or inline styles consistent with project theming.",
    "Log key actions (palette rendering, import attempt, export generation) at debug level and user‐visible confirmations at info level."
  ],
  "component_dependencies": {
    "internal_components": [
      "core/canvas.js",
      "nodes/* registration modules"
    ],
    "external_libraries": [
      "drawflow"
    ],
    "configuration_dependencies": []
  },
  "output_files": [
    {
      "path": "src/ui/toolbox_shell.js",
      "description": "ES module implementing the Toolbox Shell UI: palette rendering, import/export controls, and event binding to the Drawflow editor."
    }
  ],
  "logging_requirements": {
    "debug": [
      "Log the list of node types when rendering the palette.",
      "Log raw content of the imported file before parsing.",
      "Log the exported flow JSON object before serialization."
    ],
    "info": [
      "Inform when the palette has been rendered successfully.",
      "Inform when a flow has been imported successfully.",
      "Inform when a flow has been exported and displayed to the user."
    ]
  },
  "error_handling": [
    {
      "error_type": "MissingContainerError",
      "error_message": "Toolbox container element not found",
      "recovery_action": "Abort initialization and log error to console"
    },
    {
      "error_type": "EditorInstanceError",
      "error_message": "Drawflow editor instance is required but not provided",
      "recovery_action": "Throw an error to halt execution"
    },
    {
      "error_type": "JSONParseError",
      "error_message": "Failed to parse imported file as JSON",
      "recovery_action": "Display a user-facing alert with the parse error and skip import"
    }
  ],
  "dependency_integration_considerations": [
    "Ensure the Drawflow editor has been started (editor.start()) before initializing the toolbox shell.",
    "Coordinate with serialization module (modules/serialization.js) if custom flow transformations are needed on import/export.",
    "No special configuration is required, but file‐picker behavior may vary across browsers and should be tested for compatibility."
  ]
}