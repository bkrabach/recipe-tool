[
  {
    "name": "Class Diagram",
    "description": "Class structure of the ChatAssistantPanel module, its public API and dependencies.",
    "mermaid_code": "classDiagram\n  class ChatAssistantPanel {\n    +init(containerEl, editor, config)\n    +sendMessage(text)\n    +clearHistory()\n    +teardown()\n    +on(event, callback)\n  }\n  class DrawflowEditor\n  class Config\n  ChatAssistantPanel --> DrawflowEditor : uses\n  ChatAssistantPanel --> Config : reads\n"
  },
  {
    "name": "Component Diagram",
    "description": "High level components and their relationships for the chat assistant panel.",
    "mermaid_code": "flowchart LR\n  subgraph ChatAssistantPanelModule\n    CAP[ChatAssistantPanel]\n  end\n  CAP --> Editor[Drawflow Editor]\n  CAP --> Container[DOM Container]\n  CAP --> Config[Config]\n  CAP -->|POST JSON| LLM[LLM API Endpoint]\n"
  },
  {
    "name": "Sequence Diagram",
    "description": "Sequence of events when a user sends a message and receives a response.",
    "mermaid_code": "sequenceDiagram\n  participant User\n  participant CAP as ChatAssistantPanel\n  participant LLM as LLM Endpoint\n  participant Editor as DrawflowEditor\n\n  User->>CAP: sendMessage(text)\n  CAP-->CAP: disable send button\n  CAP->>LLM: POST /endpoint {messages}\n  LLM-->>CAP: {assistant response}\n  CAP-->CAP: render assistant message\n  CAP-->CAP: enable send button\n  User->>CAP: click insert node icon\n  CAP->>Editor: addNode('llm_generate', config)\n"
  },
  {
    "name": "State Diagram",
    "description": "Internal state transitions of the ChatAssistantPanel during messaging.",
    "mermaid_code": "stateDiagram\n  [*] --> Idle\n  Idle --> AwaitingResponse: sendMessage\n  AwaitingResponse --> Idle: onResponse\n  AwaitingResponse --> Error: onError\n  Error --> AwaitingResponse: retry\n  Idle --> Idle: clearHistory\n"
  }
]