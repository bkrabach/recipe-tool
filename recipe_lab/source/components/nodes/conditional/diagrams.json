[
  {
    "name": "Class Diagram",
    "description": "Shows the module, the exported API, and the data config type used by the conditional node.",
    "mermaid_code": "```mermaid\nclassDiagram\n  class ConditionalNodeModule {\n    +registerConditional(editor)\n  }\n  class NodeDataConfig {\n    - condition : string\n    - if_true : number[]\n    - if_false : number[]\n  }\n  ConditionalNodeModule ..> NodeDataConfig : uses\n```"
  },
  {
    "name": "Component Diagram",
    "description": "Illustrates how the nodes.conditional module, its internal pieces, and the Drawflow editor integrate.",
    "mermaid_code": "```mermaid\nflowchart LR\n  subgraph nodes.conditional_module\n    RC[registerConditional]\n    HT[HTML template]\n    OC[onCreate]\n  end\n  subgraph Drawflow_editor\n    RN[registerNode api]\n    EI[export/import]\n  end\n  RC --> RN\n  RC --> HT\n  OC --> RC\n  RN --> EI\n```"
  },
  {
    "name": "Sequence Diagram",
    "description": "Details the runtime interaction when registering the node and when a node instance is created.",
    "mermaid_code": "```mermaid\nsequenceDiagram\n  participant App\n  participant Editor as DrawflowEditor\n  participant Module as nodes.conditional\n  App->>Module: call registerConditional(editor)\n  Module->>Editor: editor.registerNode('conditional', template, hooks)\n  Editor->>Module: onCreate(node)\n  Module->>node.data.config: init condition, if_true, if_false\n  Module->>InputField: bind change listener\n  InputField-->>Module: change event\n  Module->>node.data.config: update config.condition\n```"
  },
  {
    "name": "Activity Diagram",
    "description": "Describes the steps taken during the onCreate hook to bind the condition input and initialize config.",
    "mermaid_code": "```mermaid\nflowchart TD\n  A[Start onCreate] --> B[querySelector df-condition]\n  B -->|not found| C[throw MissingInputElement]\n  B -->|found| D[initialize config fields]\n  D --> E[attach input listener]\n  E --> F[log debug binding]\n  F --> G[finish onCreate]\n```"
  },
  {
    "name": "State Machine Diagram",
    "description": "Models the state of the condition field from initialization through user input.",
    "mermaid_code": "```mermaid\nstateDiagram\n  [*] --> ConditionEmpty\n  ConditionEmpty --> ConditionFilled : user types condition\n  ConditionFilled --> ConditionFilled : user updates input\n  ConditionFilled --> ConditionEmpty : user clears input\n```"
  }
]