{
  "component_title": "nodes.conditional",
  "purpose_statement": "Registers the \"conditional\" Drawflow node type, enabling branching execution in the canvas based on a user-defined condition. It provides the HTML UI for inputting the condition expression and wires the node’s configuration to the Drawflow engine for correct serialization and deserialization.",
  "core_requirements": [
    "Export a function `registerConditional(editor)` that registers the node with name \"conditional\"",
    "Define the HTML layout for the node’s configuration, including an input field for the condition expression",
    "Implement `onCreate` to bind the `<input df-condition>` element to `node.data.config.condition`",
    "Ensure the node’s `config.condition`, `config.if_true`, and `config.if_false` values are preserved in `editor.export()` JSON",
    "Support JSON round-trip via the serialization module, so that importing the flow recreates the condition and branches"
  ],
  "implementation_considerations": [
    "Use a pure ES module (`src/nodes/conditional.js`), exporting only `registerConditional`",
    "Use Drawflow’s `editor.registerNode` API: pass an object with `html` template and `onCreate` hook",
    "In the HTML template, include `<label>` and `<input df-condition>` for the condition",
    "In `onCreate(node)`, read the `<input df-condition>` value and assign it to `node.data.config.condition`, watching for input changes",
    "Keep CSS minimal and scoped; avoid external frameworks or global state",
    "Follow the project’s modular design: node modules only import Drawflow and the serialization module if needed"
  ],
  "component_dependencies": {
    "internal_components": [],
    "external_libraries": [
      "drawflow"
    ],
    "configuration_dependencies": []
  },
  "output_files": [
    {
      "path": "src/nodes/conditional.js",
      "description": "ES module exporting `registerConditional(editor)`, which registers the conditional node type with Drawflow."
    }
  ],
  "logging_requirements": {
    "debug": [],
    "info": []
  },
  "error_handling": [
    {
      "error_type": "MissingInputElement",
      "error_message": "The HTML template must include an `<input df-condition>` element",
      "recovery_action": "Add an `<input df-condition>` to the node’s HTML template"
    },
    {
      "error_type": "BindingFailure",
      "error_message": "Failed to bind the condition input to node.data.config.condition",
      "recovery_action": "Verify that `onCreate` correctly selects the `<input df-condition>` element and assigns its value"
    }
  ],
  "dependency_integration_considerations": []
}