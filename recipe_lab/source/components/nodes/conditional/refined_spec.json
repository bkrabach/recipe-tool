{
  "component_title": "nodes.conditional",
  "purpose_statement": "Registers the “conditional” node type in Drawflow, adding a UI for entering a branching condition and two outputs (true/false). Binds the input field to the node’s configuration so that the condition expression and branch connections persist across export/import.",
  "core_requirements": [
    "Export a function registerConditional(editor) that calls editor.registerNode('conditional', ...)",
    "Provide an HTML template containing: a df-condition input field, a labeled Condition prompt, one input connector, and two output connectors marked ‘if-true’ and ‘if-false’",
    "In onCreate(node), bind the <input df-condition> element to node.data.config.condition, initializing it to an empty string and updating it on every change",
    "Initialize node.data.config.if_true and node.data.config.if_false to empty arrays",
    "Ensure that config.condition, config.if_true, and config.if_false are included in node.data.config so that editor.export() JSON round-trips preserve them",
    "Support Drawflow import via editor.import() without additional serialization calls"
  ],
  "implementation_considerations": [
    "Use a pure ES module at src/nodes/conditional.js exporting only registerConditional",
    "Use Drawflow’s editor.registerNode API and a template literal for the HTML",
    "Mark connectors with class=\"input\"/\"output if-true\"/\"output if-false\" and data-port attributes",
    "Include minimal scoped CSS classes within the template; avoid external styles",
    "In onCreate, querySelector('[df-condition]') and throw MissingInputElement if not found",
    "Attach input and change listeners to update node.data.config.condition live",
    "Emit console.debug logs for binding events and console.info when registration is complete",
    "Rely on Drawflow’s built-in export/import to handle node.data.config fields",
    "Add JSDoc typedef for node.data.config shape (condition:string, if_true:number[], if_false:number[])"
  ],
  "component_dependencies": {
    "internal_components": [],
    "external_libraries": [
      "drawflow"
    ],
    "configuration_dependencies": []
  },
  "output_files": [
    {
      "path": "src/nodes/conditional.js",
      "description": "ES module exporting registerConditional(editor), registering the conditional node and binding its UI to node.data.config"
    },
    {
      "path": "docs/nodes/conditional.md",
      "description": "User-facing documentation with import, initialization, usage examples, and Drawflow version compatibility"
    }
  ],
  "logging_requirements": {
    "debug": [
      "[conditional] bound condition input for node {node.id}",
      "[conditional] updated config.condition on input change"
    ],
    "info": [
      "[conditional] registered 'conditional' node type"
    ]
  },
  "error_handling": [
    {
      "error_type": "MissingInputElement",
      "error_message": "Required <input df-condition> element not found in HTML template",
      "recovery_action": "Add an <input df-condition> element with proper id and attributes in the template"
    },
    {
      "error_type": "BindingFailure",
      "error_message": "Failed to bind df-condition input to node.data.config.condition",
      "recovery_action": "Verify onCreate selects the correct element and sets up listeners"
    }
  ],
  "dependency_integration_considerations": [
    "Drawflow’s export/import preserves node.data.config automatically",
    "If using a project-level serialization module, ensure it serializes and restores condition and branch arrays without custom hooks"
  ]
}