{
  "component_title": "MCP Node",
  "purpose_statement": "This component defines and registers the Drawflow node type \"mcp\" in the flow-editor UI. The MCP Node enables users to configure and invoke external tools via MCP servers by editing its properties (server, tool name, arguments, and result key) directly within each node on the canvas.",
  "core_requirements": [
    "Register a Drawflow node under the name \"mcp\"",
    "Render an HTML form with inputs for:\n  • server configuration (JSON or separate fields)\n  • tool_name (string)\n  • arguments (JSON dictionary)\n  • result_key (string)",
    "Bind each form field using df-* attributes to node.data.config for persistence",
    "Validate and parse JSON inputs for server and arguments on node creation and updates",
    "Persist and expose node.data.config in the exported Drawflow JSON"
  ],
  "implementation_considerations": [
    "Import Drawflow in a plain ES module and export a single function `registerMcpNode(editor)`",
    "Define the node’s HTML template with `<input df-tool_name>`, `<textarea df-server>`, `<textarea df-arguments>`, and `<input df-result_key>`",
    "In `onCreate(node)`, attach change listeners to each df-* element to update `node.data.config`",
    "On each update, attempt to JSON.parse the server and arguments fields; on parse failure, display a warning in the node UI and revert to the last valid JSON",
    "Keep the HTML and event-binding logic minimal—avoid external frameworks and rely on vanilla JS and df-* binding conventions"
  ],
  "component_dependencies": {
    "internal_components": [],
    "external_libraries": [
      "drawflow"
    ],
    "configuration_dependencies": []
  },
  "output_files": [
    {
      "path": "src/nodes/mcp.js",
      "description": "ES module registering the MCP Drawflow node and wiring df-* inputs to node.data.config"
    }
  ],
  "logging_requirements": {
    "debug": [],
    "info": []
  },
  "error_handling": [
    {
      "error_type": "JSONParseError",
      "error_message": "Failed to parse JSON in server or arguments field",
      "recovery_action": "Display an inline warning in the node UI and revert to the last valid configuration"
    },
    {
      "error_type": "MissingFieldError",
      "error_message": "Required field (tool_name or result_key) is empty",
      "recovery_action": "Highlight the missing input with a validation message and prevent export until fixed"
    }
  ],
  "dependency_integration_considerations": []
}