{
  "component_title": "Loop Node",
  "purpose_statement": "The Loop Node component registers a Drawflow node named “loop” to allow users to configure and execute loop iterations over collections with customizable substeps in the flow editor. It binds form inputs for items, item_key, max_concurrency, delay, substeps, result_key, and fail_fast to node.data.config, validates user entries, and ensures the loop configuration and metadata (icon, label, ports) are persisted in the exported JSON.",
  "core_requirements": [
    "Export a function registerLoop(editor) that calls editor.registerNode('loop', {...}) to define the Loop node with one control input port, one control output port, and metadata (icon 'fa-repeat', label 'Loop', description).",
    "Define HTML markup using Drawflow CSS classes (drawflow-node, title-box, box) containing form fields for items, item_key, max_concurrency, delay, substeps, result_key, and a fail_fast checkbox, each using df-* attributes for binding.",
    "Implement onCreate callback to initialize form fields from node.data.config (or sensible defaults: items='', item_key='item', max_concurrency=1, delay=0, substeps='[]', result_key='result', fail_fast=true), attach event listeners to update config and call editor.updateNodeDataFromId.",
    "Validate substeps textarea via JSON.parse, ensure it yields an array of objects each with 'type' (string) and 'config' (object); on parse or schema failure, display inline error and prevent invalid config.",
    "Validate items input: accept either a context key path (dot notation) or JSON array literal; if invalid, display inline error and revert to last valid.",
    "Enforce numeric constraints: max_concurrency between 1 and 10, delay between 0 and 60 (seconds); reset out-of-bounds values to defaults with a warning.",
    "Reflect the complete node.data.config in editor.export() under each node's data.config field.",
    "Include unit tests for registerLoop verifying HTML structure, default config values, event binding, validation errors, and export JSON correctness using Jest.",
    "Provide public documentation at docs/nodes/loop_node.md covering usage, configuration options, ports, examples, and integration instructions."
  ],
  "implementation_considerations": [
    "Use df-* attributes on inputs, textarea, and checkbox to bind directly to node.data.config properties.",
    "Use <input type='text'> for string fields (items, item_key, result_key), <input type='number'> for numeric fields (max_concurrency, delay), <textarea> for JSON substeps, and <input type='checkbox'> for boolean fail_fast.",
    "Wrap the form in <div class='loop-node drawflow-node'>, include <div class='title-box'>Loop</div> and <div class='box'> around inputs, reusing Drawflow styling.",
    "In onCreate, read node.data.config or apply defaults then set input.value, textarea.value, and checkbox.checked; attach 'change'/'input' listeners to update node.data.config and call editor.updateNodeDataFromId(node.id, node.data).",
    "Perform JSON.parse on substeps value, catch SyntaxError, verify the result is Array< {type:string, config:object} >; on error, inject <p class='error-message'> and disable further edits until fixed.",
    "Resolve items field by trying JSON.parse; if that fails, treat as string path and rely on execution-time resolution; validate at creation by checking type of parsed or path reference.",
    "Enforce numeric bounds in event handlers: clamp max_concurrency to [1,10], delay to [0,60], and display temporary warning below the input.",
    "Register ports in editor.registerNode: inputs:1, outputs:1; Drawflow will render .input and .output nodes automatically.",
    "Include metadata in registerNode call: { icon: 'fa-repeat', label: 'Loop', description: 'Iterate over a collection with custom substeps' }.",
    "Write Jest tests in tests/nodes/loop.test.js, mocking a minimal Drawflow editor with registerNode stub to assert HTML, defaults, and event binding."
  ],
  "component_dependencies": {
    "internal_components": [],
    "external_libraries": [
      "drawflow"
    ],
    "configuration_dependencies": []
  },
  "output_files": [
    {
      "path": "src/nodes/loop.js",
      "description": "ES module that exports registerLoop(editor) to register the Loop node with Drawflow and handle UI binding, validation, and metadata."
    },
    {
      "path": "docs/nodes/loop_node.md",
      "description": "Public documentation file for the Loop node, covering import, initialization, configuration options, ports, examples, and integration guidance."
    },
    {
      "path": "tests/nodes/loop.test.js",
      "description": "Unit tests for the Loop node registration and behavior using Jest, covering defaults, event binding, validation, and export JSON."
    }
  ],
  "logging_requirements": {
    "debug": [
      "Registering Loop node with Drawflow",
      "Initializing Loop node fields from config",
      "User updated '{{key}}' to '{{value}}'",
      "Validated substeps JSON",
      "Validated items field",
      "Clamped numeric field '{{field}}' to '{{value}}'"
    ],
    "info": [
      "Loop node created with id={{node.id}}",
      "Loop execution started",
      "Loop execution completed successfully, results stored under '{{result_key}}'"
    ]
  },
  "error_handling": [
    {
      "error_type": "JSONParseError",
      "error_message": "Invalid JSON in substeps configuration",
      "recovery_action": "Display inline error below substeps textarea and disable saving until corrected."
    },
    {
      "error_type": "InvalidItemsError",
      "error_message": "Items must be a valid context key path or JSON array of items",
      "recovery_action": "Display inline error below items field and revert to last valid value."
    },
    {
      "error_type": "ConcurrencyLimitError",
      "error_message": "max_concurrency must be between 1 and 10",
      "recovery_action": "Reset max_concurrency to default value 1 and show a warning message."
    },
    {
      "error_type": "DelayValueError",
      "error_message": "Delay must be between 0 and 60 seconds",
      "recovery_action": "Reset delay to default 0 and show a warning message."
    },
    {
      "error_type": "ExecutionError",
      "error_message": "Error processing item '{{itemKey}}': {{errorDetail}}",
      "recovery_action": "If fail_fast=true, stop further processing; otherwise, record error in '{{result_key}}__errors' and continue with next items."
    }
  ],
  "dependency_integration_considerations": [
    "Compatible with Drawflow v0.6.x and its df-* attribute binding mechanism.",
    "No additional integration required; users must import the module and call registerLoop(editor) after editor.start()."
  ]
}