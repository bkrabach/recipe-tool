{
  "steps": [
    {
      "type": "llm_generate",
      "config": {
        "prompt": "You are an expert software architect.\nGenerate a standalone specification for component '{{ component.id }}' given the project spec, context docs, reference docs, and design philosophies.\n<COMPONENT>\n{{ component }}\n</COMPONENT>\n<PROJECT_SPEC>\n{{ project_spec_content }}\n</PROJECT_SPEC>\n<CONTEXT_DOCS>\n{% if context_docs_content %}{% for path in context_docs_content %}[{{ path }}]\n{{ context_docs_content[path] }}\n{% endfor %}{% endif %}\n</CONTEXT_DOCS>\n<REFERENCE_DOCS>\n{% if ref_docs_content %}{% for path in ref_docs_content %}[{{ path }}]\n{{ ref_docs_content[path] }}\n{% endfor %}{% endif %}\n</REFERENCE_DOCS>\n<PHILOSOPHY_GUIDES>\n[IMPLEMENTATION] {{ implementation_philosophy }}\n[MODULAR] {{ modular_design_philosophy }}\n[DOCS_GUIDE] {{ component_docs_spec_guide }}\n</PHILOSOPHY_GUIDES>",
        "model": "{{ model }}",
        "output_format": {
          "type": "object",
          "properties": {
            "component_title": { "type": "string" },
            "purpose_statement": { "type": "string" },
            "core_requirements": {
              "type": "array",
              "items": { "type": "string" }
            },
            "implementation_considerations": {
              "type": "array",
              "items": { "type": "string" }
            },
            "component_dependencies": {
              "type": "object",
              "properties": {
                "internal_components": {
                  "type": "array",
                  "items": { "type": "string" }
                },
                "external_libraries": {
                  "type": "array",
                  "items": { "type": "string" }
                },
                "configuration_dependencies": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              },
              "required": [
                "internal_components",
                "external_libraries",
                "configuration_dependencies"
              ]
            },
            "output_files": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "path": { "type": "string" },
                  "description": { "type": "string" }
                },
                "required": ["path", "description"]
              }
            },
            "logging_requirements": {
              "type": "object",
              "properties": {
                "debug": { "type": "array", "items": { "type": "string" } },
                "info": { "type": "array", "items": { "type": "string" } }
              },
              "required": ["debug", "info"]
            },
            "error_handling": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "error_type": { "type": "string" },
                  "error_message": { "type": "string" },
                  "recovery_action": { "type": "string" }
                },
                "required": ["error_type", "error_message", "recovery_action"]
              }
            },
            "dependency_integration_considerations": {
              "type": "array",
              "items": { "type": "string" }
            }
          },
          "required": [
            "component_title",
            "purpose_statement",
            "core_requirements",
            "implementation_considerations",
            "component_dependencies",
            "output_files",
            "logging_requirements",
            "error_handling",
            "dependency_integration_considerations"
          ]
        },
        "output_key": "candidate_spec"
      }
    },
    {
      "type": "write_files",
      "config": {
        "files": [
          {
            "path": "{{ component.id }}/candidate_spec.json",
            "content_key": "candidate_spec"
          }
        ],
        "root": "{{ output_dir }}/components"
      }
    },
    {
      "type": "llm_generate",
      "config": {
        "prompt": "Review the following candidate spec and generate any clarification questions that would be needed to create the spec and docs files as defined within the attached guide.\n<CANDIDATE_SPEC>\n{{ candidate_spec }}\n</CANDIDATE_SPEC>\nRespond with a JSON array of strings (questions).\n\n<COMPONENT_DOCS_SPEC_GUIDE>\n{{ component_docs_spec_guide }}\n</COMPONENT_DOCS_SPEC_GUIDE>",
        "model": "{{ model }}",
        "output_format": [{ "type": "string" }],
        "output_key": "clarification_questions"
      }
    },
    {
      "type": "write_files",
      "config": {
        "files": [
          {
            "path": "{{ component.id }}/clarification_questions.json",
            "content_key": "clarification_questions"
          }
        ],
        "root": "{{ output_dir }}/components"
      }
    },
    {
      "type": "llm_generate",
      "config": {
        "prompt": "Refine the candidate spec based on answers to the clarification questions.\n<CANDIDATE_SPEC>\n{{ candidate_spec }}\n</CANDIDATE_SPEC>\n<QUESTIONS>\n{{ clarification_questions }}\n</QUESTIONS>\n\nAdditional Context:\n\n<PROJECT_SPEC>\n{{ project_spec_content }}\n</PROJECT_SPEC>\n<CONTEXT_DOCS>\n{% if context_docs_content %}{% for path in context_docs_content %}[{{ path }}]\n{{ context_docs_content[path] }}\n{% endfor %}{% endif %}\n</CONTEXT_DOCS>\n<REFERENCE_DOCS>\n{% if ref_docs_content %}{% for path in ref_docs_content %}[{{ path }}]\n{{ ref_docs_content[path] }}\n{% endfor %}{% endif %}\n</REFERENCE_DOCS>\n<PHILOSOPHY_GUIDES>\n[IMPLEMENTATION] {{ implementation_philosophy }}\n[MODULAR] {{ modular_design_philosophy }}\n[DOCS_GUIDE] {{ component_docs_spec_guide }}\n</PHILOSOPHY_GUIDES>",
        "model": "{{ model }}",
        "output_format": {
          "type": "object",
          "properties": {
            "component_title": { "type": "string" },
            "purpose_statement": { "type": "string" },
            "core_requirements": {
              "type": "array",
              "items": { "type": "string" }
            },
            "implementation_considerations": {
              "type": "array",
              "items": { "type": "string" }
            },
            "component_dependencies": {
              "type": "object",
              "properties": {
                "internal_components": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "notes": { "type": "string" }
                    },
                    "required": ["id", "notes"]
                  }
                },
                "external_libraries": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "notes": { "type": "string" }
                    },
                    "required": ["id", "notes"]
                  }
                },
                "configuration_dependencies": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "config_var": { "type": "string" },
                      "optional": { "type": "boolean" },
                      "notes": { "type": "string" }
                    },
                    "required": ["config_var", "optional", "notes"]
                  }
                }
              },
              "required": [
                "internal_components",
                "external_libraries",
                "configuration_dependencies"
              ]
            },
            "output_files": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "path": { "type": "string" },
                  "description": { "type": "string" }
                },
                "required": ["path", "description"]
              }
            },
            "logging_requirements": {
              "type": "object",
              "properties": {
                "debug": { "type": "array", "items": { "type": "string" } },
                "info": { "type": "array", "items": { "type": "string" } }
              },
              "required": ["debug", "info"]
            },
            "error_handling": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "error_type": { "type": "string" },
                  "error_message": { "type": "string" },
                  "recovery_action": { "type": "string" }
                },
                "required": ["error_type", "error_message", "recovery_action"]
              }
            },
            "dependency_integration_considerations": {
              "type": "array",
              "items": { "type": "string" }
            }
          },
          "required": [
            "component_title",
            "purpose_statement",
            "core_requirements",
            "implementation_considerations",
            "component_dependencies",
            "output_files",
            "logging_requirements",
            "error_handling",
            "dependency_integration_considerations"
          ]
        },
        "output_key": "refined_spec"
      }
    },
    {
      "type": "write_files",
      "config": {
        "files": [
          {
            "path": "{{ component.id }}/refined_spec.json",
            "content_key": "refined_spec"
          }
        ],
        "root": "{{ output_dir }}/components"
      }
    },
    {
      "type": "llm_generate",
      "config": {
        "prompt": "Evaluate the refined spec for completeness and alignment with our component docs and spec guide.\n<REFINED_SPEC>\n{{ refined_spec }}\n</REFINED_SPEC>\n\n<COMPONENT_DOCS_SPEC_GUIDE>\n{{ component_docs_spec_guide }}\n</COMPONENT_DOCS_SPEC_GUIDE>",
        "model": "{{ model }}",
        "output_format": {
          "type": "object",
          "properties": {
            "approved": { "type": "boolean" },
            "notes": { "type": "string" }
          },
          "required": ["approved"]
        },
        "output_key": "approval_result"
      }
    },
    {
      "type": "write_files",
      "config": {
        "files": [
          {
            "path": "{{ component.id }}/approval_result.json",
            "content_key": "approval_result"
          }
        ],
        "root": "{{ output_dir }}/components"
      }
    },
    {
      "type": "conditional",
      "config": {
        "condition": "{{ approval_result.approved }}",
        "if_true": {
          "steps": [
            {
              "type": "llm_generate",
              "config": {
                "prompt": "Create mermaid versions of the useful UML diagrams for this component '{{ component.id }}' based on the refined spec.\n<COMPONENT>\n{{ component }}\n</COMPONENT>\n<REFINED_SPEC>\n{{ refined_spec }}\n</REFINED_SPEC>\n<UML_MERMAID_GUIDE>\n{{ uml_mermaid_guide }}\n</UML_MERMAID_GUIDE>. For the mermaid code, do not use parentheses in labels",
                "model": "{{ model }}",
                "output_format": [
                  {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string" },
                      "description": { "type": "string" },
                      "mermaid_code": { "type": "string" }
                    }
                  }
                ],
                "output_key": "diagrams"
              }
            },
            {
              "type": "write_files",
              "config": {
                "files": [
                  {
                    "path": "{{ component.id }}/diagram.md",
                    "content_key": "diagrams"
                  }
                ],
                "root": "{{ output_dir }}/components"
              }
            },
            {
              "type": "llm_generate",
              "config": {
                "prompt": "Using the development guide below, generate scaffold code modules for component '{{ component.id }}' based on the refined spec and diagrams.\n<REFINED_SPEC>\n{{ refined_spec }}\n</REFINED_SPEC>\n<COMPONENT>\n{{ component }}\n</COMPONENT>\n<DIAGRAMS>\n{{ diagrams }}\n</DIAGRAMS>\n<PHILOSOPHY_GUIDES>\n[IMPLEMENTATION] {{ implementation_philosophy }}\n[MODULAR] {{ modular_design_philosophy }}\n[DOCS_GUIDE] {{ component_docs_spec_guide }}\n</PHILOSOPHY_GUIDES>",
                "model": "{{ model }}",
                "output_format": "files",
                "output_key": "scaffold_files"
              }
            },
            {
              "type": "write_files",
              "config": {
                "files_key": "scaffold_files",
                "root": "{{ output_dir }}/components/{{ component.id }}/code"
              }
            },
            {
              "type": "llm_generate",
              "config": {
                "prompt": "Generate the docs file for the component '{{ component.id }}' based on the refined spec and provided diagrams.\nWhere appropriate, include any of the diagrams that would be important for consumers/users of this component, but not the ones only needed by implementers of the component.\n<REFINED_SPEC>\n{{ refined_spec }}\n</REFINED_SPEC>\n<COMPONENT>\n{{ component }}\n</COMPONENT>\n<DIAGRAMS>\n{{ diagrams }}\n</DIAGRAMS>\n<PHILOSOPHY_GUIDES>\n[IMPLEMENTATION] {{ implementation_philosophy }}\n[MODULAR] {{ modular_design_philosophy }}\n[DOCS_GUIDE] {{ component_docs_spec_guide }}\n</PHILOSOPHY_GUIDES>\nSave as '{{ component.id }}_docs.md'.",
                "model": "{{ model }}",
                "output_format": "files",
                "output_key": "docs_file"
              }
            },
            {
              "type": "write_files",
              "config": {
                "files_key": "docs_file",
                "root": "{{ output_dir }}/components"
              }
            },
            {
              "type": "llm_generate",
              "config": {
                "prompt": "Generate the spec file for the component '{{ component.id }}' based on the refined spec, component docs, and provided diagrams.\nInclude any of the diagrams that were not used by the docs file for this component, so that they are available to the implementer who will get both the docs and spec file for their context.\n<REFINED_SPEC>\n{{ refined_spec }}\n</REFINED_SPEC>\n<COMPONENT>\n{{ component }}\n</COMPONENT>\n<DIAGRAMS>\n{{ diagrams }}\n</DIAGRAMS>\n<COMPONENT_DOCS>\n{{ docs_file[0].content }}\n</COMPONENT_DOCS>\n<PHILOSOPHY_GUIDES>\n[IMPLEMENTATION] {{ implementation_philosophy }}\n[MODULAR] {{ modular_design_philosophy }}\n[DOCS_GUIDE] {{ component_docs_spec_guide }}\n</PHILOSOPHY_GUIDES>\nSave as '{{ component.id }}_spec.md'.",
                "model": "{{ model }}",
                "output_format": "files",
                "output_key": "spec_file"
              }
            },
            {
              "type": "write_files",
              "config": {
                "files_key": "spec_file",
                "root": "{{ output_dir }}/components"
              }
            }
          ]
        }
      }
    }
  ]
}
