# This file was generated by Codebase-Generator, do not edit directly
"""
Azure Responses Component
Provides a PydanticAI wrapper for Azure OpenAI Responses API models.
"""

import os
import logging
from typing import Optional

from azure.identity import DefaultAzureCredential, get_bearer_token_provider
from openai import AsyncAzureOpenAI
from pydantic_ai.models.openai import OpenAIResponsesModel
from pydantic_ai.providers.openai import OpenAIProvider


def create_azure_responses_model(
    logger: logging.Logger,
    model_name: str,
    deployment_name: Optional[str] = None,
) -> OpenAIResponsesModel:
    """
    Create a PydanticAI OpenAIResponsesModel for Azure OpenAI.

    Args:
        logger: Logger for logging messages.
        model_name: Underlying model name (e.g., "gpt-4o").
        deployment_name: Azure deployment name; if not provided, will use environment or model_name.

    Returns:
        Configured OpenAIResponsesModel for Azure.

    Raises:
        EnvironmentError: If required environment variables are missing.
    """
    # Load configuration from environment
    use_mi = os.getenv("AZURE_USE_MANAGED_IDENTITY", "false").lower() in ("1", "true", "yes")
    api_key = os.getenv("AZURE_OPENAI_API_KEY")
    endpoint = os.getenv("AZURE_OPENAI_BASE_URL")
    api_version = os.getenv("AZURE_OPENAI_API_VERSION", "2025-03-01-preview")
    env_deploy = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME")
    client_id = os.getenv("AZURE_CLIENT_ID")

    # Determine deployment name
    deployment = deployment_name or env_deploy or model_name

    # Validate required settings
    if not endpoint:
        msg = "AZURE_OPENAI_BASE_URL environment variable is required for Azure OpenAI."  # noqa: F841
        logger.error(msg)
        raise EnvironmentError(msg)
    if not use_mi and not api_key:
        msg = "AZURE_OPENAI_API_KEY environment variable is required when not using managed identity."  # noqa: F841
        logger.error(msg)
        raise EnvironmentError(msg)

    # Mask sensitive values for logs
    def _mask(value: Optional[str]) -> str:
        if not value:
            return ""
        if len(value) <= 2:
            return "*"
        return f"{value[0]}***{value[-1]}"

    logger.debug("Azure OpenAI endpoint: %s", endpoint)
    logger.debug("Azure OpenAI API version: %s", api_version)
    logger.debug("Azure deployment name: %s", deployment)
    logger.debug("Using Managed Identity: %s", use_mi)
    logger.debug("Azure API Key: %s", _mask(api_key))
    logger.debug("Azure Client ID: %s", _mask(client_id))

    # Initialize Azure OpenAI client
    try:
        if use_mi:
            # Use Azure Identity (DefaultAzureCredential supports client_id via env)
            credential_kwargs = {}
            if client_id:
                credential_kwargs["managed_identity_client_id"] = client_id
            credential = DefaultAzureCredential(**credential_kwargs)
            scope = "https://cognitiveservices.azure.com/.default"
            token_provider = get_bearer_token_provider(credential, scope)
            azure_client = AsyncAzureOpenAI(
                azure_endpoint=endpoint,
                api_version=api_version,
                azure_ad_token_provider=token_provider,
            )
            auth_method = "Managed Identity"
        else:
            azure_client = AsyncAzureOpenAI(
                azure_endpoint=endpoint,
                api_version=api_version,
                api_key=api_key,
            )
            auth_method = "API Key"
    except Exception as e:
        logger.error("Failed to initialize Azure OpenAI client: %s", e, exc_info=True)
        raise

    logger.info(
        "Initialized Azure OpenAI client for model '%s' using %s authentication.",
        deployment,
        auth_method,
    )

    # Create and return the PydanticAI OpenAIResponsesModel
    model = OpenAIResponsesModel(
        deployment,
        provider=OpenAIProvider(openai_client=azure_client),
    )
    logger.info("Created OpenAIResponsesModel for Azure deployment '%s'.", deployment)
    return model
