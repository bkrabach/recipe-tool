# This file was generated by Codebase-Generator, do not edit directly
"""
Azure Responses Component
Provides a PydanticAI wrapper for Azure OpenAI Responses API models.
Handles authentication (API key or Azure Identity), endpoint configuration, and model creation.
"""
import logging
import os
from typing import Optional

from azure.identity import DefaultAzureCredential, get_bearer_token_provider
from openai import AsyncAzureOpenAI
from pydantic_ai.models.openai import OpenAIResponsesModel
from pydantic_ai.providers.openai import OpenAIProvider

logger = logging.getLogger(__name__)

__all__ = ["create_azure_responses_model"]


def _mask_secret(secret: Optional[str]) -> str:
    """Mask a secret value, showing only first and last character."""
    if not secret or len(secret) <= 2:
        return "***"
    return f"{secret[0]}***{secret[-1]}"


def _str_to_bool(val: Optional[str]) -> bool:
    """Convert a string to boolean (true/false)."""
    if not val:
        return False
    return val.strip().lower() in {"1", "true", "t", "yes", "y"}


def create_azure_responses_model(
    model_name: str,
    deployment_name: Optional[str] = None,
) -> OpenAIResponsesModel:
    """
    Create an Azure-compatible OpenAIResponsesModel using either API key or Azure AD authentication.

    Args:
        model_name: The underlying model or deployment name.
        deployment_name: Optional override for deployment name.

    Returns:
        Configured OpenAIResponsesModel for Azure OpenAI Responses API.

    Raises:
        ValueError: On missing configuration or authentication failure.
    """
    # Load environment
    use_mi = _str_to_bool(os.getenv("AZURE_USE_MANAGED_IDENTITY"))
    base_url = os.getenv("AZURE_OPENAI_BASE_URL")
    api_key = os.getenv("AZURE_OPENAI_API_KEY")
    az_client_id = os.getenv("AZURE_CLIENT_ID")
    api_version = os.getenv("AZURE_OPENAI_API_VERSION", "2025-03-01-preview")

    # Determine deployment
    dep = deployment_name or os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME") or model_name

    # Debug: log environment (mask secrets)
    logger.debug(
        "Azure OpenAI config: use_mi=%s, base_url=%s, deployment=%s, api_version=%s, client_id=%s, api_key=%s",
        use_mi,
        base_url,
        dep,
        api_version,
        az_client_id or "(none)",
        _mask_secret(api_key),
    )

    # Validate required settings
    if not base_url:
        msg = "Environment variable AZURE_OPENAI_BASE_URL is required"
        logger.error(msg)
        raise ValueError(msg)

    # Create Azure OpenAI client
    try:
        if use_mi:
            # Managed Identity authentication
            cred_kwargs = {}
            if az_client_id:
                cred_kwargs["managed_identity_client_id"] = az_client_id
            credential = DefaultAzureCredential(**cred_kwargs)
            # Scope for Azure OpenAI
            scope = "https://cognitiveservices.azure.com/.default"
            token_provider = get_bearer_token_provider(credential, scope)
            azure_client = AsyncAzureOpenAI(
                azure_endpoint=base_url,
                api_version=api_version,
                azure_ad_token_provider=token_provider,
            )
            auth_method = "azure_managed_identity"
        else:
            # API key authentication
            if not api_key:
                msg = (
                    "Either AZURE_OPENAI_API_KEY must be set, or AZURE_USE_MANAGED_IDENTITY=true"
                )
                logger.error(msg)
                raise ValueError(msg)
            azure_client = AsyncAzureOpenAI(
                azure_endpoint=base_url,
                api_version=api_version,
                api_key=api_key,
            )
            auth_method = "api_key"
    except Exception as exc:
        logger.error("Failed to initialize Azure OpenAI client: %s", str(exc))
        raise

    # Log creation info
    logger.info(
        "Creating Azure Responses model: model_name=%s, deployment=%s, auth_method=%s",
        model_name,
        dep,
        auth_method,
    )

    # Wrap in PydanticAI model
    provider = OpenAIProvider(openai_client=azure_client)
    try:
        model = OpenAIResponsesModel(dep, provider=provider)
    except Exception as exc:
        logger.error("Failed to create OpenAIResponsesModel: %s", str(exc))
        raise

    return model
