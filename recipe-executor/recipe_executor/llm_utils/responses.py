# This file was generated by Codebase-Generator, do not edit directly
"""
Responses component for Recipe Executor.

Provides OpenAI built-in tool integration using the PydanticAI Responses API.
"""

import os
import logging
from typing import Optional

from pydantic_ai.models.openai import OpenAIResponsesModel
from pydantic_ai.providers.openai import OpenAIProvider

__all__ = ["get_openai_responses_model"]


def _mask_key(key: str) -> str:
    """
    Mask all but the first and last character of a key for safe logging.
    """
    if not key:
        return ""
    if len(key) <= 2:
        return "*" * len(key)
    return key[0] + "*" * (len(key) - 2) + key[-1]


def get_openai_responses_model(
    logger: logging.Logger,
    model_name: Optional[str] = None,
) -> OpenAIResponsesModel:
    """
    Create an OpenAIResponsesModel for the given model name.

    Args:
        logger (logging.Logger): Logger for logging messages.
        model_name: Name of the model (e.g., "gpt-4o").

    Returns:
        OpenAIResponsesModel: A PydanticAI OpenAIResponsesModel instance.

    Raises:
        ValueError: If no model name is provided.
        EnvironmentError: If the OPENAI_API_KEY environment variable is missing.
        RuntimeError: If the model cannot be created.
    """
    # Load environment variables
    default_model = os.getenv("DEFAULT_MODEL")
    api_key = os.getenv("OPENAI_API_KEY")

    masked_key = _mask_key(api_key or "")
    logger.debug(f"Loaded environment variables: DEFAULT_MODEL={default_model}, OPENAI_API_KEY={masked_key}")

    # Determine model name to use
    use_model = model_name or default_model
    if not use_model:
        msg = "Model name must be provided via argument 'model_name' or DEFAULT_MODEL environment variable."
        logger.error(msg)
        raise ValueError(msg)

    # Ensure API key is set
    if not api_key:
        msg = "Environment variable OPENAI_API_KEY is not set."
        logger.error(msg)
        raise EnvironmentError(msg)

    logger.info(f"Using OpenAI Responses model: {use_model}")
    try:
        provider = OpenAIProvider(api_key=api_key)
        model = OpenAIResponsesModel(use_model, provider=provider)
        return model
    except Exception as err:
        logger.error(
            f"Failed to create OpenAIResponsesModel for model '{use_model}': {err}",
            exc_info=True,
        )
        raise RuntimeError(f"Failed to create OpenAIResponsesModel for model '{use_model}': {err}") from err
